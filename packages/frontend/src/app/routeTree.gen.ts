/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const AuthenticatedLayoutLazyImport = createFileRoute(
  '/_authenticated-layout',
)()
const IndexLazyImport = createFileRoute('/')()
const SigninIndexLazyImport = createFileRoute('/signin/')()
const AuthenticatedLayoutTrackedIndexLazyImport = createFileRoute(
  '/_authenticated-layout/tracked/',
)()
const AuthenticatedLayoutSettingsIndexLazyImport = createFileRoute(
  '/_authenticated-layout/settings/',
)()
const AuthenticatedLayoutComposerIndexLazyImport = createFileRoute(
  '/_authenticated-layout/composer/',
)()
const AuthenticatedLayoutBrowseIndexLazyImport = createFileRoute(
  '/_authenticated-layout/browse/',
)()

// Create/Update Routes

const AuthenticatedLayoutLazyRoute = AuthenticatedLayoutLazyImport.update({
  id: '/_authenticated-layout',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/_authenticated-layout.lazy').then((d) => d.Route),
)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const SigninIndexLazyRoute = SigninIndexLazyImport.update({
  id: '/signin/',
  path: '/signin/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signin/index.lazy').then((d) => d.Route))

const AuthenticatedLayoutTrackedIndexLazyRoute =
  AuthenticatedLayoutTrackedIndexLazyImport.update({
    id: '/tracked/',
    path: '/tracked/',
    getParentRoute: () => AuthenticatedLayoutLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated-layout/tracked/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedLayoutSettingsIndexLazyRoute =
  AuthenticatedLayoutSettingsIndexLazyImport.update({
    id: '/settings/',
    path: '/settings/',
    getParentRoute: () => AuthenticatedLayoutLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated-layout/settings/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedLayoutComposerIndexLazyRoute =
  AuthenticatedLayoutComposerIndexLazyImport.update({
    id: '/composer/',
    path: '/composer/',
    getParentRoute: () => AuthenticatedLayoutLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated-layout/composer/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedLayoutBrowseIndexLazyRoute =
  AuthenticatedLayoutBrowseIndexLazyImport.update({
    id: '/browse/',
    path: '/browse/',
    getParentRoute: () => AuthenticatedLayoutLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated-layout/browse/index.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated-layout': {
      id: '/_authenticated-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedLayoutLazyImport
      parentRoute: typeof rootRoute
    }
    '/signin/': {
      id: '/signin/'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated-layout/browse/': {
      id: '/_authenticated-layout/browse/'
      path: '/browse'
      fullPath: '/browse'
      preLoaderRoute: typeof AuthenticatedLayoutBrowseIndexLazyImport
      parentRoute: typeof AuthenticatedLayoutLazyImport
    }
    '/_authenticated-layout/composer/': {
      id: '/_authenticated-layout/composer/'
      path: '/composer'
      fullPath: '/composer'
      preLoaderRoute: typeof AuthenticatedLayoutComposerIndexLazyImport
      parentRoute: typeof AuthenticatedLayoutLazyImport
    }
    '/_authenticated-layout/settings/': {
      id: '/_authenticated-layout/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedLayoutSettingsIndexLazyImport
      parentRoute: typeof AuthenticatedLayoutLazyImport
    }
    '/_authenticated-layout/tracked/': {
      id: '/_authenticated-layout/tracked/'
      path: '/tracked'
      fullPath: '/tracked'
      preLoaderRoute: typeof AuthenticatedLayoutTrackedIndexLazyImport
      parentRoute: typeof AuthenticatedLayoutLazyImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedLayoutLazyRouteChildren {
  AuthenticatedLayoutBrowseIndexLazyRoute: typeof AuthenticatedLayoutBrowseIndexLazyRoute
  AuthenticatedLayoutComposerIndexLazyRoute: typeof AuthenticatedLayoutComposerIndexLazyRoute
  AuthenticatedLayoutSettingsIndexLazyRoute: typeof AuthenticatedLayoutSettingsIndexLazyRoute
  AuthenticatedLayoutTrackedIndexLazyRoute: typeof AuthenticatedLayoutTrackedIndexLazyRoute
}

const AuthenticatedLayoutLazyRouteChildren: AuthenticatedLayoutLazyRouteChildren =
  {
    AuthenticatedLayoutBrowseIndexLazyRoute:
      AuthenticatedLayoutBrowseIndexLazyRoute,
    AuthenticatedLayoutComposerIndexLazyRoute:
      AuthenticatedLayoutComposerIndexLazyRoute,
    AuthenticatedLayoutSettingsIndexLazyRoute:
      AuthenticatedLayoutSettingsIndexLazyRoute,
    AuthenticatedLayoutTrackedIndexLazyRoute:
      AuthenticatedLayoutTrackedIndexLazyRoute,
  }

const AuthenticatedLayoutLazyRouteWithChildren =
  AuthenticatedLayoutLazyRoute._addFileChildren(
    AuthenticatedLayoutLazyRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof AuthenticatedLayoutLazyRouteWithChildren
  '/signin': typeof SigninIndexLazyRoute
  '/browse': typeof AuthenticatedLayoutBrowseIndexLazyRoute
  '/composer': typeof AuthenticatedLayoutComposerIndexLazyRoute
  '/settings': typeof AuthenticatedLayoutSettingsIndexLazyRoute
  '/tracked': typeof AuthenticatedLayoutTrackedIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof AuthenticatedLayoutLazyRouteWithChildren
  '/signin': typeof SigninIndexLazyRoute
  '/browse': typeof AuthenticatedLayoutBrowseIndexLazyRoute
  '/composer': typeof AuthenticatedLayoutComposerIndexLazyRoute
  '/settings': typeof AuthenticatedLayoutSettingsIndexLazyRoute
  '/tracked': typeof AuthenticatedLayoutTrackedIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_authenticated-layout': typeof AuthenticatedLayoutLazyRouteWithChildren
  '/signin/': typeof SigninIndexLazyRoute
  '/_authenticated-layout/browse/': typeof AuthenticatedLayoutBrowseIndexLazyRoute
  '/_authenticated-layout/composer/': typeof AuthenticatedLayoutComposerIndexLazyRoute
  '/_authenticated-layout/settings/': typeof AuthenticatedLayoutSettingsIndexLazyRoute
  '/_authenticated-layout/tracked/': typeof AuthenticatedLayoutTrackedIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/signin'
    | '/browse'
    | '/composer'
    | '/settings'
    | '/tracked'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/signin' | '/browse' | '/composer' | '/settings' | '/tracked'
  id:
    | '__root__'
    | '/'
    | '/_authenticated-layout'
    | '/signin/'
    | '/_authenticated-layout/browse/'
    | '/_authenticated-layout/composer/'
    | '/_authenticated-layout/settings/'
    | '/_authenticated-layout/tracked/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthenticatedLayoutLazyRoute: typeof AuthenticatedLayoutLazyRouteWithChildren
  SigninIndexLazyRoute: typeof SigninIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthenticatedLayoutLazyRoute: AuthenticatedLayoutLazyRouteWithChildren,
  SigninIndexLazyRoute: SigninIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated-layout",
        "/signin/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_authenticated-layout": {
      "filePath": "_authenticated-layout.lazy.tsx",
      "children": [
        "/_authenticated-layout/browse/",
        "/_authenticated-layout/composer/",
        "/_authenticated-layout/settings/",
        "/_authenticated-layout/tracked/"
      ]
    },
    "/signin/": {
      "filePath": "signin/index.lazy.tsx"
    },
    "/_authenticated-layout/browse/": {
      "filePath": "_authenticated-layout/browse/index.lazy.tsx",
      "parent": "/_authenticated-layout"
    },
    "/_authenticated-layout/composer/": {
      "filePath": "_authenticated-layout/composer/index.lazy.tsx",
      "parent": "/_authenticated-layout"
    },
    "/_authenticated-layout/settings/": {
      "filePath": "_authenticated-layout/settings/index.lazy.tsx",
      "parent": "/_authenticated-layout"
    },
    "/_authenticated-layout/tracked/": {
      "filePath": "_authenticated-layout/tracked/index.lazy.tsx",
      "parent": "/_authenticated-layout"
    }
  }
}
ROUTE_MANIFEST_END */
